{"version":3,"sources":["../webpack/bootstrap","../external \"path\"","../external \"util\"","../external \"fs\"",".././node_modules/minimatch/minimatch.js",".././node_modules/path-is-absolute/index.js",".././node_modules/glob/glob.js","../external \"vscode\"",".././node_modules/fs.realpath/index.js","../external \"assert\"",".././node_modules/glob/common.js",".././node_modules/wrappy/wrappy.js",".././node_modules/once/once.js",".././src/extension.ts",".././src/container.ts",".././node_modules/awilix/lib/awilix.module.js",".././node_modules/fs.realpath/old.js",".././node_modules/brace-expansion/index.js",".././node_modules/concat-map/index.js",".././node_modules/balanced-match/index.js",".././node_modules/inherits/inherits.js",".././node_modules/inherits/inherits_browser.js","../external \"events\"",".././node_modules/glob/sync.js",".././node_modules/inflight/inflight.js",".././node_modules/camel-case/camel-case.js",".././node_modules/upper-case/upper-case.js",".././node_modules/no-case/no-case.js",".././node_modules/lower-case/lower-case.js",".././node_modules/no-case/vendor/non-word-regexp.js",".././node_modules/no-case/vendor/camel-case-regexp.js",".././node_modules/no-case/vendor/camel-case-upper-regexp.js",".././node_modules/awilix/lib sync",".././src/vs-code-api.ts",".././src/default-settings.ts",".././src/configuration.ts",".././src/utility.ts",".././src/supported-extensions.ts",".././src/barrel-builder.ts",".././src/create-barrel-command.ts",".././src/auto-barreller.ts",".././src/export-statement-builder.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","minimatch","Minimatch","path","sep","er","GLOBSTAR","expand","plTypes","!","open","close","?","+","*","@","qmark","star","twoStarDot","twoStarNoDot","reSpecials","split","reduce","set","slashSplit","ext","a","b","keys","forEach","k","pattern","options","TypeError","nocomment","charAt","trim","match","this","join","regexp","negate","comment","empty","make","braceExpand","nobrace","filter","list","defaults","def","length","orig","debug","_made","parseNegate","globSet","console","error","globParts","map","si","parse","indexOf","negateOffset","nonegate","substr","isSub","noglobstar","stateChar","re","hasMagic","nocase","escaping","patternListStack","negativeLists","inClass","reClassStart","classStart","patternStart","dot","self","clearStateChar","len","noext","push","type","start","reStart","pl","pop","reEnd","cs","substring","RegExp","sp","SUBPARSE","tail","slice","replace","_","$1","$2","addPatternStart","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","newRe","globUnescape","flags","regExp","_glob","_src","makeRe","twoStar","regExpEscape","ex","mm","f","nonull","partial","filename","file","matchBase","hit","matchOne","flipNegate","fi","pi","fl","fr","pr","swallowee","toLowerCase","Error","posix","win32","result","exec","device","isUnc","Boolean","process","platform","glob","fs","rp","inherits","EE","EventEmitter","assert","isAbsolute","globSync","common","setopts","alphasort","alphasorti","ownProp","inflight","childrenIgnored","isIgnored","once","cb","sync","Glob","GlobSync","_didRealPath","matches","Array","on","_processing","_emitQueue","_processQueue","paused","noprocess","done","_process","nextTick","_finish","options_","origin","add","extend","j","aborted","realpath","_didRealpath","_realpath","finish","emit","found","_realpathSet","next","index","matchset","_makeAbs","realpathCache","real","syscall","_mark","mark","makeAbs","abort","pause","resume","eq","e","_emitMatch","pq","inGlobStar","prefix","_processSimple","read","remain","abs","_processGlobStar","_processReaddir","_readdir","entries","_processReaddir2","pn","rawGlob","dotOk","matchedEntries","stat","nomount","root","shift","concat","absolute","nodir","cache","isArray","st","statCache","_readdirInGlobStar","follow","lstatcb","lstat","code","isSym","isSymbolicLink","symlinks","isDirectory","readdir","_readdirError","_readdirEntries","readdirCb","cwdAbs","cwd","strict","silent","_processGlobStar2","remainWithoutGlobStar","gspref","noGlobStar","instead","below","_stat","exists","_processSimple2","trail","test","resolve","needDir","maxLength","undefined","statcb","_stat2","realpathSync","monkeypatch","unmonkeypatch","origRealpath","origRealpathSync","version","ok","old","newError","obj","field","nounique","nosort","Infinity","ignore","ignoreMap","setupIgnores","changedCwd","nou","all","apply","literal","sort","notDir","isDir","slash","mabs","some","item","gmatcher","localeCompare","gpattern","matcher","wrappy","fn","wrapper","args","arguments","ret","called","onceStrict","onceError","proto","Function","configurable","vscode","container_1","autoBarreller","activate","context","container","createBarrelCommandHandler","createBarrelCommand","commands","registerCommand","uri","execute","createBarrelAtCommand","__awaiter","folderPath","window","showInputBox","prompt","Uri","startCommand","stopCommand","stop","subscriptions","deactivate","dispose","awilix_1","vs_code_api_1","configuration_1","utility_1","barrel_builder_1","create_barrel_command_1","auto_barreller_1","export_statement_builder_1","createContainer","injectionMode","InjectionMode","CLASSIC","register","vsCodeApi","asClass","VsCodeApi","singleton","configuration","Configuration","utility","Utility","barrelBuilder","BarrelBuilder","CreateBarrelCommand","AutoBarreller","exportStatementBuilder","ExportStatementBuilder","__webpack_exports__","AwilixError","AwilixResolutionError","AwilixTypeError","ExtendableError","Lifetime","RESOLVER","aliasTo","asFunction","asValue","createBuildResolver","createDisposableResolver","listModules","glob__WEBPACK_IMPORTED_MODULE_0__","path__WEBPACK_IMPORTED_MODULE_1__","util__WEBPACK_IMPORTED_MODULE_2__","EOL","[object Object]","message","super","constructor","captureStackTrace","funcDescription","paramName","expectedType","givenType","condition","resolutionStack","toString","resolutionPathString","msg","createTokenizer","source","end","pos","parenLeft","parenRight","nextFlags","ch","isWhiteSpace","skipUntil","isAtRoot","nextCh","closing","isIdentifierStart","scanIdentifier","advance","createToken","identStart","IDENT_PART_EXPR","callback","isStringQuote","skipString","quote","prev","IDENT_START_EXPR","isClass","tokenizer","first","second","toUpperCase","isFunction","val","nameExpr","_listModules","globPattern","opts","assign","patternOpts","globPatterns","array","arr","flatten","SINGLETON","TRANSIENT","SCOPED","PROXY","makeOptions","lifetime","generateResolve","Type","Reflect","construct","setLifetime","setInjectionMode","updateResolver","inject","injector","transient","scoped","proxy","classic","disposer","arg1","rest","target","dependencyParseTarget","dependencies","parseDependencies","_next","params","nextToken","skipUntilConstructor","parseParams","param","optional","unexpected","SyntaxError","parseParameterList","parent","getPrototypeOf","cradle","locals","allKeys","idx","uniq","ownKeys","Proxy","iterator","prop","createInjectorProxy","resolveOpts","wrapWithLocals","children","allowUnregistered","nameFormatters","camelCase","loadModules","resolverOptions","optsWithDefaults","items","loaded","default","acc","cur","x","moduleDescriptor","inlineConfig","formatter","formatName","moduleDescriptorOpts","regOpts","reg","loadedModules","FAMILY_TREE","ROLL_UP_REGISTRATIONS","parentContainer","computedRegistrations","registrations","custom","inspectCradle","_target","from","regs","rollUpRegistrations","getOwnPropertyDescriptor","inspect","inspect$1","Map","createScope","arg2","getOwnPropertySymbols","build","targetOrResolver","has","clear","Promise","entry","resolver","disposable","then","familyTree","rootContainer","depth","bustCache","registrationNamesIterator","registrationName","cached","resolved","err","pathModule","isWindows","DEBUG","env","NODE_DEBUG","maybeCallback","backtrace","missingCallback","throwDeprecation","noDeprecation","stack","traceDeprecation","trace","rethrow","normalize","nextPartRe","splitRootRe","current","base","previous","original","seenLinks","knownHard","lstatSync","lastIndex","resolvedLink","linkTarget","id","dev","ino","statSync","readlinkSync","LOOP","gotResolvedLink","gotStat","gotTarget","readlink","concatMap","balanced","str","isTop","expansions","pre","isNumericSequence","body","isAlphaSequence","isSequence","isOptions","post","escClose","parseCommaParts","parts","postParts","embrace","N","numeric","y","width","Math","max","incr","lte","reverse","gte","pad","isPadded","String","fromCharCode","need","z","el","expansion","escSlash","escOpen","escComma","escPeriod","escapeBraces","unescapeBraces","random","parseInt","charCodeAt","xs","res","maybeMatch","range","begs","beg","left","right","ai","bi","util","ctor","superCtor","super_","writable","TempCtor","newPattern","readdirSync","reqs","RES","cbs","splice","makeres","upperCase","noCase","locale","mergeNumbers","LANGUAGES","tr","az","lt","i̇","j̇","į̇","i̇̀","i̇́","i̇̃","lang","lowerCase","NON_WORD_REGEXP","CAMEL_CASE_REGEXP","CAMEL_CASE_UPPER_REGEXP","replacement","İ","I","İ","J","Į","Ì","Í","Ĩ","webpackEmptyContext","req","default_settings_1","barrelFilePath","statementDetails","document","openTextDocument","lineCount","lineAt","text","lastLineWithContent","newLinePosition","Position","barrelFileUri","workspaceEdit","WorkspaceEdit","alias","aliasLine","newAliasStatement","statement","insert","isBarrelImport","barrelStatementPrefix","line","delete","rangeIncludingLineBreak","workspace","applyEdit","showInformationMessage","modal","showWarningMessage","onCreated","onDelete","relativeGlobPattern","RelativePattern","rootPath","createFileSystemWatcher","onDidCreate","onDidDelete","findFiles","searchGlob","config","getConfiguration","defaultSettings","defaultExtension","alwaysUseDefaultLanguage","getSettingOrDefault","watchGlob","ignoreFilePathContainingAnyOf","useImportAliasExportPattern","disableRecursiveBarrelling","section","configSetting","filePath","getText","statementSuffix","lineToRemove","documentLine","lineText","newAliasText","showErrorMessage","contentLines","fileUri","createFile","supported_extensions_1","baseName","basename","extname","aliasParts","nameParts","pathParts","part","partElements","element","getDocumentText","fileExtension","barrelFileName","dirname","barrelFiles","lastSlashIndex","lastIndexOf","folder","getParentFolder","barrelPath","find","filePaths","currentConfig","every","endsWith","ignoredFragmentsSetting","fragments","languageExtension","possibleExtensions","supportedExtensions","pathContainsIgnoredFragment","js","ts","rootFolderPath","getLanguageExtension","aliases","exportStatements","shouldBeIncludedInBarrel","exportStatement","barrelForStatementIsIncluded","barrelImportSuffix","rootFolder","findSupportedFiles","barrelDetails","writeFile","isRunning","fileSystemWatcher","handleFileCreated","handleFileDeleted","log","findClosestBarrel","barrelFolderPath","appendStatementToBarrel","reject","relative","removeStatementFromBarrel","importRelativePath","buildAlias","containsDefaultExport"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","module.exports = require(\"path\");","module.exports = require(\"util\");","module.exports = require(\"fs\");","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n}\n\nfunction win32(path) {\n\t// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = Boolean(device && device.charAt(1) !== ':');\n\n\t// UNC paths are always absolute\n\treturn Boolean(result[2] || isUnc);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n","// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar inherits = require('inherits')\nvar EE = require('events').EventEmitter\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar globSync = require('./sync.js')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = require('inflight')\nvar util = require('util')\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = require('once')\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nfunction extend (origin, add) {\n  if (add === null || typeof add !== 'object') {\n    return origin\n  }\n\n  var keys = Object.keys(add)\n  var i = keys.length\n  while (i--) {\n    origin[keys[i]] = add[keys[i]]\n  }\n  return origin\n}\n\nglob.hasMagic = function (pattern, options_) {\n  var options = extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n\n  if (!pattern)\n    return false\n\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  this._processing = 0\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  var sync = true\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n  sync = false\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0) {\n      if (sync) {\n        process.nextTick(function () {\n          self._finish()\n        })\n      } else {\n        self._finish()\n      }\n    }\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    rp.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = isAbsolute(e) ? e : this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute)\n    e = abs\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er && er.code === 'ENOENT')\n      return cb()\n\n    var isSym = lstat && lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        this.emit('error', error)\n        this.abort()\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return cb()\n\n  return cb(null, c, stat)\n}\n","module.exports = require(\"vscode\");","module.exports = realpath\nrealpath.realpath = realpath\nrealpath.sync = realpathSync\nrealpath.realpathSync = realpathSync\nrealpath.monkeypatch = monkeypatch\nrealpath.unmonkeypatch = unmonkeypatch\n\nvar fs = require('fs')\nvar origRealpath = fs.realpath\nvar origRealpathSync = fs.realpathSync\n\nvar version = process.version\nvar ok = /^v[0-5]\\./.test(version)\nvar old = require('./old.js')\n\nfunction newError (er) {\n  return er && er.syscall === 'realpath' && (\n    er.code === 'ELOOP' ||\n    er.code === 'ENOMEM' ||\n    er.code === 'ENAMETOOLONG'\n  )\n}\n\nfunction realpath (p, cache, cb) {\n  if (ok) {\n    return origRealpath(p, cache, cb)\n  }\n\n  if (typeof cache === 'function') {\n    cb = cache\n    cache = null\n  }\n  origRealpath(p, cache, function (er, result) {\n    if (newError(er)) {\n      old.realpath(p, cache, cb)\n    } else {\n      cb(er, result)\n    }\n  })\n}\n\nfunction realpathSync (p, cache) {\n  if (ok) {\n    return origRealpathSync(p, cache)\n  }\n\n  try {\n    return origRealpathSync(p, cache)\n  } catch (er) {\n    if (newError(er)) {\n      return old.realpathSync(p, cache)\n    } else {\n      throw er\n    }\n  }\n}\n\nfunction monkeypatch () {\n  fs.realpath = realpath\n  fs.realpathSync = realpathSync\n}\n\nfunction unmonkeypatch () {\n  fs.realpath = origRealpath\n  fs.realpathSync = origRealpathSync\n}\n","module.exports = require(\"assert\");","exports.alphasort = alphasort\nexports.alphasorti = alphasorti\nexports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = require(\"path\")\nvar minimatch = require(\"minimatch\")\nvar isAbsolute = require(\"path-is-absolute\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasorti (a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase())\n}\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b)\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n    var gpattern = pattern.replace(/(\\/\\*\\*)+$/, '')\n    gmatcher = new Minimatch(gpattern, { dot: true })\n  }\n\n  return {\n    matcher: new Minimatch(pattern, { dot: true }),\n    gmatcher: gmatcher\n  }\n}\n\nfunction setopts (self, pattern, options) {\n  if (!options)\n    options = {}\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  self.silent = !!options.silent\n  self.pattern = pattern\n  self.strict = options.strict !== false\n  self.realpath = !!options.realpath\n  self.realpathCache = options.realpathCache || Object.create(null)\n  self.follow = !!options.follow\n  self.dot = !!options.dot\n  self.mark = !!options.mark\n  self.nodir = !!options.nodir\n  if (self.nodir)\n    self.mark = true\n  self.sync = !!options.sync\n  self.nounique = !!options.nounique\n  self.nonull = !!options.nonull\n  self.nosort = !!options.nosort\n  self.nocase = !!options.nocase\n  self.stat = !!options.stat\n  self.noprocess = !!options.noprocess\n  self.absolute = !!options.absolute\n\n  self.maxLength = options.maxLength || Infinity\n  self.cache = options.cache || Object.create(null)\n  self.statCache = options.statCache || Object.create(null)\n  self.symlinks = options.symlinks || Object.create(null)\n\n  setupIgnores(self, options)\n\n  self.changedCwd = false\n  var cwd = process.cwd()\n  if (!ownProp(options, \"cwd\"))\n    self.cwd = cwd\n  else {\n    self.cwd = path.resolve(options.cwd)\n    self.changedCwd = self.cwd !== cwd\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\")\n  self.root = path.resolve(self.root)\n  if (process.platform === \"win32\")\n    self.root = self.root.replace(/\\\\/g, \"/\")\n\n  // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)\n  if (process.platform === \"win32\")\n    self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\")\n  self.nomount = !!options.nomount\n\n  // disable comments and negation in Minimatch.\n  // Note that they are not supported in Glob itself anyway.\n  options.nonegate = true\n  options.nocomment = true\n\n  self.minimatch = new Minimatch(pattern, options)\n  self.options = self.minimatch.options\n}\n\nfunction finish (self) {\n  var nou = self.nounique\n  var all = nou ? [] : Object.create(null)\n\n  for (var i = 0, l = self.matches.length; i < l; i ++) {\n    var matches = self.matches[i]\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        var literal = self.minimatch.globSet[i]\n        if (nou)\n          all.push(literal)\n        else\n          all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou)\n        all.push.apply(all, m)\n      else\n        m.forEach(function (m) {\n          all[m] = true\n        })\n    }\n  }\n\n  if (!nou)\n    all = Object.keys(all)\n\n  if (!self.nosort)\n    all = all.sort(self.nocase ? alphasorti : alphasort)\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i])\n    }\n    if (self.nodir) {\n      all = all.filter(function (e) {\n        var notDir = !(/\\/$/.test(e))\n        var c = self.cache[e] || self.cache[makeAbs(self, e)]\n        if (notDir && c)\n          notDir = c !== 'DIR' && !Array.isArray(c)\n        return notDir\n      })\n    }\n  }\n\n  if (self.ignore.length)\n    all = all.filter(function(m) {\n      return !isIgnored(self, m)\n    })\n\n  self.found = all\n}\n\nfunction mark (self, p) {\n  var abs = makeAbs(self, p)\n  var c = self.cache[abs]\n  var m = p\n  if (c) {\n    var isDir = c === 'DIR' || Array.isArray(c)\n    var slash = p.slice(-1) === '/'\n\n    if (isDir && !slash)\n      m += '/'\n    else if (!isDir && slash)\n      m = m.slice(0, -1)\n\n    if (m !== p) {\n      var mabs = makeAbs(self, m)\n      self.statCache[mabs] = self.statCache[abs]\n      self.cache[mabs] = self.cache[abs]\n    }\n  }\n\n  return m\n}\n\n// lotta situps...\nfunction makeAbs (self, f) {\n  var abs = f\n  if (f.charAt(0) === '/') {\n    abs = path.join(self.root, f)\n  } else if (isAbsolute(f) || f === '') {\n    abs = f\n  } else if (self.changedCwd) {\n    abs = path.resolve(self.cwd, f)\n  } else {\n    abs = path.resolve(f)\n  }\n\n  if (process.platform === 'win32')\n    abs = abs.replace(/\\\\/g, '/')\n\n  return abs\n}\n\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n\nfunction childrenIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n","// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","import * as vscode from 'vscode';\r\n\r\nimport { container } from './container';\r\nimport { CreateBarrelCommand } from './create-barrel-command';\r\nimport { AutoBarreller } from './auto-barreller';\r\n\r\nlet autoBarreller: AutoBarreller;\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  autoBarreller = container.resolve<AutoBarreller>('autoBarreller');\r\n  const createBarrelCommandHandler: CreateBarrelCommand = container.resolve<CreateBarrelCommand>('createBarrelCommand');\r\n\r\n  const createBarrelCommand = vscode.commands.registerCommand(\r\n    'autoBarrel.createBarrel',\r\n    (uri: vscode.Uri) => createBarrelCommandHandler.execute(uri.path)\r\n  );\r\n\r\n  const createBarrelAtCommand = vscode.commands.registerCommand('autoBarrel.createBarrelAt', async () => {\r\n    const folderPath = await vscode.window.showInputBox({\r\n      prompt: 'Enter Folder Path'\r\n    });\r\n    const uri = vscode.Uri.parse(folderPath);\r\n    return createBarrelCommandHandler.execute(uri.path);\r\n  })\r\n\r\n  const startCommand = vscode.commands.registerCommand('autoBarrel.start', autoBarreller.start);\r\n  const stopCommand = vscode.commands.registerCommand('autoBarrel.stop', autoBarreller.stop);\r\n\r\n  context.subscriptions.push(createBarrelCommand);\r\n  context.subscriptions.push(createBarrelAtCommand);\r\n  context.subscriptions.push(startCommand);\r\n  context.subscriptions.push(stopCommand);\r\n}\r\n\r\nexport function deactivate() {\r\n  if (typeof autoBarreller !== 'undefined') {\r\n    autoBarreller.dispose();\r\n  }\r\n}\r\n","import { createContainer, asClass, InjectionMode} from 'awilix';\r\n\r\nimport { VsCodeApi } from './vs-code-api';\r\nimport { Configuration } from './configuration';\r\nimport { Utility } from './utility';\r\nimport { BarrelBuilder } from './barrel-builder';\r\nimport { CreateBarrelCommand } from './create-barrel-command';\r\nimport { AutoBarreller } from './auto-barreller';\r\nimport { ExportStatementBuilder } from './export-statement-builder';\r\n\r\nexport const container = createContainer({\r\n    injectionMode: InjectionMode.CLASSIC\r\n});\r\n\r\ncontainer.register({vsCodeApi: asClass(VsCodeApi).singleton()});\r\ncontainer.register({configuration: asClass(Configuration).singleton()});\r\ncontainer.register({utility: asClass(Utility).singleton()});\r\ncontainer.register({barrelBuilder: asClass(BarrelBuilder).singleton()});\r\ncontainer.register({createBarrelCommand: asClass(CreateBarrelCommand)});\r\ncontainer.register({autoBarreller: asClass(AutoBarreller)});\r\ncontainer.register({exportStatementBuilder: asClass(ExportStatementBuilder).singleton()});","import { sync } from 'glob';\nimport { basename, resolve } from 'path';\nimport * as util from 'util';\nimport { inspect } from 'util';\n\n/**\r\n * Newline.\r\n */\r\nconst EOL = '\\n';\r\n/**\r\n * An extendable error class.\r\n * @author https://github.com/bjyoungblood/es6-error/\r\n */\r\nclass ExtendableError extends Error {\r\n    /**\r\n     * Constructor for the error.\r\n     *\r\n     * @param  {String} message\r\n     * The error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        // extending Error is weird and does not propagate `message`\r\n        Object.defineProperty(this, 'message', {\r\n            enumerable: false,\r\n            value: message\r\n        });\r\n        Object.defineProperty(this, 'name', {\r\n            enumerable: false,\r\n            value: this.constructor.name\r\n        });\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n/**\r\n * Base error for all Awilix-specific errors.\r\n */\r\nclass AwilixError extends ExtendableError {\r\n}\r\n/**\r\n * Error thrown to indicate a type mismatch.\r\n * TODO(v3): remove `AwilixNotAFunctionError` and use this.\r\n */\r\nclass AwilixTypeError extends AwilixError {\r\n    /**\r\n     * Constructor, takes the function name, expected and given\r\n     * type to produce an error.\r\n     *\r\n     * @param {string} funcDescription\r\n     * Name of the function being guarded.\r\n     *\r\n     * @param {string} paramName\r\n     * The parameter there was an issue with.\r\n     *\r\n     * @param {string} expectedType\r\n     * Name of the expected type.\r\n     *\r\n     * @param {string} givenType\r\n     * Name of the given type.\r\n     */\r\n    constructor(funcDescription, paramName, expectedType, givenType) {\r\n        super(`${funcDescription}: expected ${paramName} to be ${expectedType}, but got ${givenType}.`);\r\n    }\r\n    /**\r\n     * Asserts the given condition, throws an error otherwise.\r\n     *\r\n     * @param {*} condition\r\n     * The condition to check\r\n     *\r\n     * @param {string} funcDescription\r\n     * Name of the function being guarded.\r\n     *\r\n     * @param {string} paramName\r\n     * The parameter there was an issue with.\r\n     *\r\n     * @param {string} expectedType\r\n     * Name of the expected type.\r\n     *\r\n     * @param {string} givenType\r\n     * Name of the given type.\r\n     */\r\n    static assert(condition, funcDescription, paramName, expectedType, givenType) {\r\n        if (!condition) {\r\n            throw new AwilixTypeError(funcDescription, paramName, expectedType, givenType);\r\n        }\r\n        return condition;\r\n    }\r\n}\r\n/**\r\n * A nice error class so we can do an instanceOf check.\r\n */\r\nclass AwilixResolutionError extends AwilixError {\r\n    /**\r\n     * Constructor, takes the registered modules and unresolved tokens\r\n     * to create a message.\r\n     *\r\n     * @param {string|symbol} name\r\n     * The name of the module that could not be resolved.\r\n     *\r\n     * @param  {string[]} resolutionStack\r\n     * The current resolution stack\r\n     */\r\n    constructor(name, resolutionStack, message) {\r\n        if (typeof name === 'symbol') {\r\n            name = name.toString();\r\n        }\r\n        resolutionStack = resolutionStack.slice();\r\n        resolutionStack.push(name);\r\n        const resolutionPathString = resolutionStack.join(' -> ');\r\n        let msg = `Could not resolve '${name}'.`;\r\n        if (message) {\r\n            msg += ` ${message}`;\r\n        }\r\n        msg += EOL + EOL;\r\n        msg += `Resolution path: ${resolutionPathString}`;\r\n        super(msg);\r\n    }\r\n}\n\n/**\r\n * Creates a tokenizer for the specified source.\r\n *\r\n * @param source\r\n */\r\nfunction createTokenizer(source) {\r\n    const end = source.length;\r\n    let pos = 0;\r\n    let type = 'EOF';\r\n    let value = '';\r\n    let flags = 0 /* None */;\r\n    // These are used to greedily skip as much as possible.\r\n    // Whenever we reach a paren, we increment these.\r\n    let parenLeft = 0;\r\n    let parenRight = 0;\r\n    return {\r\n        next,\r\n        done\r\n    };\r\n    /**\r\n     * Advances the tokenizer and returns the next token.\r\n     */\r\n    function next(nextFlags = 0 /* None */) {\r\n        flags = nextFlags;\r\n        advance();\r\n        return createToken();\r\n    }\r\n    /**\r\n     * Advances the tokenizer state.\r\n     */\r\n    function advance() {\r\n        value = '';\r\n        type = 'EOF';\r\n        while (true) {\r\n            if (pos >= end) {\r\n                return (type = 'EOF');\r\n            }\r\n            let ch = source.charAt(pos);\r\n            // Whitespace is irrelevant\r\n            if (isWhiteSpace(ch)) {\r\n                pos++;\r\n                continue;\r\n            }\r\n            switch (ch) {\r\n                case '(':\r\n                    pos++;\r\n                    parenLeft++;\r\n                    return (type = ch);\r\n                case ')':\r\n                    pos++;\r\n                    parenRight++;\r\n                    return (type = ch);\r\n                case '*':\r\n                    pos++;\r\n                    return (type = ch);\r\n                case ',':\r\n                    pos++;\r\n                    return (type = ch);\r\n                case '=':\r\n                    pos++;\r\n                    if ((flags & 1 /* Dumb */) === 0) {\r\n                        // Not in dumb-mode, so attempt to skip.\r\n                        skipExpression();\r\n                    }\r\n                    // We need to know that there's a default value so we can\r\n                    // skip it if it does not exist when resolving.\r\n                    return (type = ch);\r\n                case '/':\r\n                    pos++;\r\n                    const nextCh = source.charAt(pos);\r\n                    if (nextCh === '/') {\r\n                        skipUntil(c => c === '\\n');\r\n                        pos++;\r\n                    }\r\n                    if (nextCh === '*') {\r\n                        skipUntil(c => {\r\n                            const closing = source.charAt(pos + 1);\r\n                            return c === '*' && closing === '/';\r\n                        });\r\n                        pos++;\r\n                    }\r\n                    continue;\r\n                default:\r\n                    // Scans an identifier.\r\n                    if (isIdentifierStart(ch)) {\r\n                        scanIdentifier();\r\n                        return type;\r\n                    }\r\n                    // Elegantly skip over tokens we don't care about.\r\n                    pos++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Scans an identifier, given it's already been proven\r\n     * we are ready to do so.\r\n     */\r\n    function scanIdentifier() {\r\n        const identStart = source.charAt(pos);\r\n        const start = ++pos;\r\n        while (isIdentifierPart(source.charAt(pos))) {\r\n            pos++;\r\n        }\r\n        value = '' + identStart + source.substring(start, pos);\r\n        type = value === 'function' || value === 'class' ? value : 'ident';\r\n        if (type !== 'ident') {\r\n            value = '';\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * Skips everything until the next comma or the end of the parameter list.\r\n     * Checks the parenthesis balance so we correctly skip function calls.\r\n     */\r\n    function skipExpression() {\r\n        skipUntil(ch => {\r\n            const isAtRoot = parenLeft === parenRight + 1;\r\n            if (ch === ',' && isAtRoot) {\r\n                return true;\r\n            }\r\n            if (ch === '(') {\r\n                parenLeft++;\r\n                return false;\r\n            }\r\n            if (ch === ')') {\r\n                parenRight++;\r\n                if (isAtRoot) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    /**\r\n     * Skips strings and whilespace until the predicate is true.\r\n     */\r\n    function skipUntil(callback) {\r\n        while (pos < source.length) {\r\n            let ch = source.charAt(pos);\r\n            if (callback(ch)) {\r\n                return;\r\n            }\r\n            if (isWhiteSpace(ch)) {\r\n                pos++;\r\n                continue;\r\n            }\r\n            if (isStringQuote(ch)) {\r\n                skipString();\r\n                continue;\r\n            }\r\n            pos++;\r\n        }\r\n    }\r\n    /**\r\n     * Given the current position is at a string quote, skips the entire string.\r\n     */\r\n    function skipString() {\r\n        const quote = source.charAt(pos);\r\n        pos++;\r\n        while (pos < source.length) {\r\n            const ch = source.charAt(pos);\r\n            const prev = source.charAt(pos - 1);\r\n            // Checks if the quote was escaped.\r\n            if (ch === quote && prev !== '\\\\') {\r\n                pos++;\r\n                return;\r\n            }\r\n            // Template strings are a bit tougher, we want to skip the interpolated values.\r\n            if (quote === '`') {\r\n                const next = source.charAt(pos + 1);\r\n                if (next === '$') {\r\n                    const afterDollar = source.charAt(pos + 2);\r\n                    if (afterDollar === '{') {\r\n                        // This is the start of an interpolation; skip the ${\r\n                        pos = pos + 2;\r\n                        // Skip strings and whitespace until we reach the ending }.\r\n                        // This includes skipping nested interpolated strings. :D\r\n                        skipUntil(ch => ch === '}');\r\n                    }\r\n                }\r\n            }\r\n            pos++;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a token from the current state.\r\n     */\r\n    function createToken() {\r\n        if (value) {\r\n            return { value, type };\r\n        }\r\n        return { type };\r\n    }\r\n    /**\r\n     * Determines if we are done parsing.\r\n     */\r\n    function done() {\r\n        return type === 'EOF';\r\n    }\r\n}\r\n/**\r\n * Determines if the given character is a whitespace character.\r\n *\r\n * @param  {string}  ch\r\n * @return {Boolean}\r\n */\r\nfunction isWhiteSpace(ch) {\r\n    switch (ch) {\r\n        case '\\r':\r\n        case '\\n':\r\n        case ' ':\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Determines if the specified character is a string quote.\r\n * @param  {string}  ch\r\n * @return {Boolean}\r\n */\r\nfunction isStringQuote(ch) {\r\n    switch (ch) {\r\n        case \"'\":\r\n        case '\"':\r\n        case '`':\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n// NOTE: I've added the `.` character so that member expression paths\r\n// are seen as identifiers. This is so we don't get a constructor token for\r\n// stuff like `MyClass.prototype.constructor()`\r\nconst IDENT_START_EXPR = /^[_$a-zA-Z\\xA0-\\uFFFF]$/;\r\nconst IDENT_PART_EXPR = /^[._$a-zA-Z0-9\\xA0-\\uFFFF]$/;\r\n/**\r\n * Determines if the character is a valid JS identifier start character.\r\n */\r\nfunction isIdentifierStart(ch) {\r\n    return IDENT_START_EXPR.test(ch);\r\n}\r\n/**\r\n * Determines if the character is a valid JS identifier start character.\r\n */\r\nfunction isIdentifierPart(ch) {\r\n    return IDENT_PART_EXPR.test(ch);\r\n}\n\n/**\r\n * Quick flatten utility to flatten a 2-dimensional array.\r\n *\r\n * @param  {Array<Array<Item>>} array\r\n * The array to flatten.\r\n *\r\n * @return {Array<Item>}\r\n * The flattened array.\r\n */\r\nfunction flatten(array) {\r\n    const result = [];\r\n    array.forEach(arr => {\r\n        arr.forEach(item => {\r\n            result.push(item);\r\n        });\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Creates a { name: value } object if the input isn't already in that format.\r\n *\r\n * @param  {string|object} name\r\n * Either a string or an object.\r\n *\r\n * @param  {*} value\r\n * The value, only used if name is not an object.\r\n *\r\n * @return {object}\r\n */\r\nfunction nameValueToObject(name, value) {\r\n    let obj = name;\r\n    if (typeof obj === 'string' || typeof obj === 'symbol') {\r\n        return { [name]: value };\r\n    }\r\n    return obj;\r\n}\r\n/**\r\n * Returns the last item in the array.\r\n *\r\n * @param  {*[]} arr\r\n * The array.\r\n *\r\n * @return {*}\r\n * The last element.\r\n */\r\nfunction last(arr) {\r\n    return arr[arr.length - 1];\r\n}\r\n/**\r\n * Determines if the given function is a class.\r\n *\r\n * @param  {Function} fn\r\n * @return {Boolean}\r\n */\r\nfunction isClass(fn) {\r\n    /*tslint:disable-next-line*/\r\n    if (typeof fn !== 'function') {\r\n        return false;\r\n    }\r\n    // Should only need 2 tokens.\r\n    const tokenizer = createTokenizer(fn.toString());\r\n    const first = tokenizer.next();\r\n    if (first.type === 'class') {\r\n        return true;\r\n    }\r\n    const second = tokenizer.next();\r\n    if (first.type === 'function' && second.value) {\r\n        if (second.value[0] === second.value[0].toUpperCase()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Determines if the given value is a function.\r\n *\r\n * @param  {Any} val\r\n * Any value to check if it's a function.\r\n *\r\n * @return {Boolean}\r\n * true if the value is a function, false otherwise.\r\n */\r\nfunction isFunction(val) {\r\n    return typeof val === 'function';\r\n}\r\n/**\r\n * Returns the unique items in the array.\r\n *\r\n * @param {Array<T>}\r\n * The array to remove dupes from.\r\n *\r\n * @return {Array<T>}\r\n * The deduped array.\r\n */\r\nfunction uniq(arr) {\r\n    const result = [];\r\n    for (const idx in arr) {\r\n        const item = arr[idx];\r\n        if (result.indexOf(item) === -1) {\r\n            result.push(item);\r\n        }\r\n    }\r\n    return result;\r\n}\n\n// Regex to extract the module name.\r\nconst nameExpr = /(.*)\\..*/i;\r\n/**\r\n * Internal method for globbing a single pattern.\r\n *\r\n * @param  {String} globPattern\r\n * The glob pattern.\r\n *\r\n * @param  {String} opts.cwd\r\n * Current working directory, used for resolving filepaths.\r\n * Defaults to `process.cwd()`.\r\n *\r\n * @return {[{name, path, opts}]}\r\n * The module names and paths.\r\n *\r\n * @api private\r\n */\r\nfunction _listModules(globPattern, opts) {\r\n    opts = Object.assign({ cwd: process.cwd(), glob: sync }, opts);\r\n    let patternOpts = null;\r\n    if (globPattern instanceof Array) {\r\n        patternOpts = globPattern[1];\r\n        globPattern = globPattern[0];\r\n    }\r\n    const result = opts.glob(globPattern, { cwd: opts.cwd });\r\n    const mapped = result.map(p => ({\r\n        name: nameExpr.exec(basename(p))[1],\r\n        path: resolve(opts.cwd, p),\r\n        opts: patternOpts\r\n    }));\r\n    return mapped;\r\n}\r\n/**\r\n * Returns a list of {name, path} pairs,\r\n * where the name is the module name, and path is the actual\r\n * full path to the module.\r\n *\r\n * @param  {String|Array<String>} globPatterns\r\n * The glob pattern as a string or an array of strings.\r\n *\r\n * @param  {String} opts.cwd\r\n * Current working directory, used for resolving filepaths.\r\n * Defaults to `process.cwd()`.\r\n *\r\n * @return {[{name, path}]}\r\n * An array of objects with the module names and paths.\r\n */\r\nfunction listModules(globPatterns, opts) {\r\n    if (Array.isArray(globPatterns)) {\r\n        return flatten(globPatterns.map(p => _listModules(p, opts)));\r\n    }\r\n    return _listModules(globPatterns, opts);\r\n}\n\n/**\r\n * Lifetime types.\r\n */\r\nconst Lifetime = {\r\n    /**\r\n     * The registration will be resolved once and only once.\r\n     * @type {String}\r\n     */\r\n    SINGLETON: 'SINGLETON',\r\n    /**\r\n     * The registration will be resolved every time (never cached).\r\n     * @type {String}\r\n     */\r\n    TRANSIENT: 'TRANSIENT',\r\n    /**\r\n     * The registration will be resolved once per scope.\r\n     * @type {String}\r\n     */\r\n    SCOPED: 'SCOPED'\r\n};\n\n/**\r\n * Resolution modes.\r\n */\r\nconst InjectionMode = {\r\n    /**\r\n     * The dependencies will be resolved by injecting the cradle proxy.\r\n     *\r\n     * @type {String}\r\n     */\r\n    PROXY: 'PROXY',\r\n    /**\r\n     * The dependencies will be resolved by inspecting parameter names of the function/constructor.\r\n     *\r\n     * @type {String}\r\n     */\r\n    CLASSIC: 'CLASSIC'\r\n};\n\n/*\r\n * Parses the parameter list of a function string, including ES6 class constructors.\r\n *\r\n * @param {string} source\r\n * The source of a function to extract the parameter list from\r\n *\r\n * @return {Array<Parameter>}\r\n * Returns an array of parameters.\r\n */\r\nfunction parseParameterList(source) {\r\n    const { next: _next, done } = createTokenizer(source);\r\n    const params = [];\r\n    let t = null;\r\n    nextToken();\r\n    while (!done()) {\r\n        switch (t.type) {\r\n            case 'class':\r\n                skipUntilConstructor();\r\n                // Next token is the constructor identifier.\r\n                nextToken();\r\n                break;\r\n            case 'function':\r\n                const next = nextToken();\r\n                if (next.type === 'ident' || next.type === '*') {\r\n                    // This is the function name or a generator star. Skip it.\r\n                    nextToken();\r\n                }\r\n                break;\r\n            case '(':\r\n                // Start parsing parameter names.\r\n                parseParams();\r\n                break;\r\n            case ')':\r\n                // We're now out of the parameter list.\r\n                return params;\r\n            case 'ident':\r\n                // Likely a paren-less arrow function\r\n                // which can have no default args.\r\n                const param = { name: t.value, optional: false };\r\n                if (t.value === 'async') {\r\n                    // Given it's the very first token, we can assume it's an async function,\r\n                    // so skip the async keyword if the next token is not an equals sign, in which\r\n                    // case it is a single-arg arrow func.\r\n                    const next = nextToken();\r\n                    if (next && next.type !== '=') {\r\n                        break;\r\n                    }\r\n                }\r\n                params.push(param);\r\n                return params;\r\n            /* istanbul ignore next */\r\n            default:\r\n                throw unexpected();\r\n        }\r\n    }\r\n    return params;\r\n    /**\r\n     * After having been placed within the parameter list of\r\n     * a function, parses the parameters.\r\n     */\r\n    function parseParams() {\r\n        // Current token is a left-paren\r\n        let param = { name: '', optional: false };\r\n        while (!done()) {\r\n            nextToken();\r\n            switch (t.type) {\r\n                case 'ident':\r\n                    param.name = t.value;\r\n                    break;\r\n                case '=':\r\n                    param.optional = true;\r\n                    break;\r\n                case ',':\r\n                    params.push(param);\r\n                    param = { name: '', optional: false };\r\n                    break;\r\n                case ')':\r\n                    if (param.name) {\r\n                        params.push(param);\r\n                    }\r\n                    return;\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw unexpected();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Skips until we reach the constructor identifier.\r\n     */\r\n    function skipUntilConstructor() {\r\n        while (!isConstructorToken() && !done()) {\r\n            nextToken(1 /* Dumb */);\r\n        }\r\n    }\r\n    /**\r\n     * Determines if the current token represents a constructor, and the next token after it is a paren\r\n     */\r\n    function isConstructorToken() {\r\n        return t.type === 'ident' && t.value === 'constructor';\r\n    }\r\n    /**\r\n     * Advances the tokenizer and stores the previous token in history\r\n     */\r\n    function nextToken(flags = 0 /* None */) {\r\n        t = _next(flags);\r\n        return t;\r\n    }\r\n    /**\r\n     * Returns an error describing an unexpected token.\r\n     */\r\n    /* istanbul ignore next */\r\n    function unexpected() {\r\n        return new SyntaxError(`Parsing parameter list, did not expect ${t.type} token${t.value ? ` (${t.value})` : ''}`);\r\n    }\r\n}\n\n/**\r\n * RESOLVER symbol can be used by modules loaded by\r\n * `loadModules` to configure their lifetime, injection mode, etc.\r\n */\r\nconst RESOLVER = Symbol('Awilix Resolver Config');\r\n/**\r\n * Creates a simple value resolver where the given value will always be resolved.\r\n *\r\n * @param  {string} name\r\n * The name to register the value as.\r\n *\r\n * @param  {*} value\r\n * The value to resolve.\r\n *\r\n * @return {object}\r\n * The resolver.\r\n */\r\nfunction asValue(value) {\r\n    return {\r\n        resolve: () => value\r\n    };\r\n}\r\n/**\r\n * Creates a factory resolver, where the given factory function\r\n * will be invoked with `new` when requested.\r\n *\r\n * @param  {string} name\r\n * The name to register the value as.\r\n *\r\n * @param  {Function} fn\r\n * The function to register.\r\n *\r\n * @param {object} opts\r\n * Additional options for the resolver.\r\n *\r\n * @return {object}\r\n * The resolver.\r\n */\r\nfunction asFunction(fn, opts) {\r\n    if (!isFunction(fn)) {\r\n        throw new AwilixTypeError('asFunction', 'fn', 'function', fn);\r\n    }\r\n    const defaults = {\r\n        lifetime: Lifetime.TRANSIENT\r\n    };\r\n    opts = makeOptions(defaults, opts, fn[RESOLVER]);\r\n    const resolve = generateResolve(fn);\r\n    let result = Object.assign({ resolve }, opts);\r\n    return createDisposableResolver(createBuildResolver(result));\r\n}\r\n/**\r\n * Like a factory resolver, but for classes that require `new`.\r\n *\r\n * @param  {string} name\r\n * The name to register the value as.\r\n *\r\n * @param  {Class} Type\r\n * The function to register.\r\n *\r\n * @param {object} opts\r\n * Additional options for the resolver.\r\n *\r\n * @return {object}\r\n * The resolver.\r\n */\r\nfunction asClass(Type, opts) {\r\n    if (!isFunction(Type)) {\r\n        throw new AwilixTypeError('asClass', 'Type', 'class', Type);\r\n    }\r\n    const defaults = {\r\n        lifetime: Lifetime.TRANSIENT\r\n    };\r\n    opts = makeOptions(defaults, opts, Type[RESOLVER]);\r\n    // A function to handle object construction for us, as to make the generateResolve more reusable\r\n    const newClass = function newClass() {\r\n        return Reflect.construct(Type, arguments);\r\n    };\r\n    const resolve = generateResolve(newClass, Type);\r\n    return createDisposableResolver(createBuildResolver(Object.assign({}, opts, { resolve })));\r\n}\r\n/**\r\n * Resolves to the specified registration.\r\n */\r\nfunction aliasTo(name) {\r\n    return {\r\n        resolve(container) {\r\n            return container.resolve(name);\r\n        }\r\n    };\r\n}\r\n/**\r\n * Given an options object, creates a fluid interface\r\n * to manage it.\r\n *\r\n * @param {*} obj\r\n * The object to return.\r\n *\r\n * @return {object}\r\n * The interface.\r\n */\r\nfunction createBuildResolver(obj) {\r\n    function setLifetime(value) {\r\n        return createBuildResolver(Object.assign({}, this, { lifetime: value }));\r\n    }\r\n    function setInjectionMode(value) {\r\n        return createBuildResolver(Object.assign({}, this, { injectionMode: value }));\r\n    }\r\n    function inject(injector) {\r\n        return createBuildResolver(Object.assign({}, this, { injector }));\r\n    }\r\n    return updateResolver(obj, {\r\n        setLifetime,\r\n        inject,\r\n        transient: partial(setLifetime, Lifetime.TRANSIENT),\r\n        scoped: partial(setLifetime, Lifetime.SCOPED),\r\n        singleton: partial(setLifetime, Lifetime.SINGLETON),\r\n        setInjectionMode,\r\n        proxy: partial(setInjectionMode, InjectionMode.PROXY),\r\n        classic: partial(setInjectionMode, InjectionMode.CLASSIC)\r\n    });\r\n}\r\n/**\r\n * Given a resolver, returns an object with methods to manage the disposer\r\n * function.\r\n * @param obj\r\n */\r\nfunction createDisposableResolver(obj) {\r\n    function disposer(dispose) {\r\n        return createDisposableResolver(Object.assign({}, this, { dispose }));\r\n    }\r\n    return updateResolver(obj, {\r\n        disposer\r\n    });\r\n}\r\n/**\r\n * Partially apply arguments to the given function.\r\n */\r\nfunction partial(fn, arg1) {\r\n    return function partiallyApplied() {\r\n        return fn.call(this, arg1);\r\n    };\r\n}\r\n/**\r\n * Makes an options object based on defaults.\r\n *\r\n * @param  {object} defaults\r\n * Default options.\r\n *\r\n * @param  {...} rest\r\n * The input to check and possibly assign to the resulting object\r\n *\r\n * @return {object}\r\n */\r\nfunction makeOptions(defaults, ...rest) {\r\n    return Object.assign({}, defaults, ...rest);\r\n}\r\n/**\r\n * Creates a new resolver with props merged from both.\r\n *\r\n * @param source\r\n * @param target\r\n */\r\nfunction updateResolver(source, target) {\r\n    const result = Object.assign({}, source, target);\r\n    return result;\r\n}\r\n/**\r\n * Returns a wrapped `resolve` function that provides values\r\n * from the injector and defers to `container.resolve`.\r\n *\r\n * @param  {AwilixContainer} container\r\n * @param  {Object} locals\r\n * @return {Function}\r\n */\r\nfunction wrapWithLocals(container, locals) {\r\n    return function wrappedResolve(name, resolveOpts) {\r\n        if (name in locals) {\r\n            return locals[name];\r\n        }\r\n        return container.resolve(name, resolveOpts);\r\n    };\r\n}\r\n/**\r\n * Returns a new Proxy that checks the result from `injector`\r\n * for values before delegating to the actual container.\r\n *\r\n * @param  {Object} cradle\r\n * @param  {Function} injector\r\n * @return {Proxy}\r\n */\r\nfunction createInjectorProxy(container, injector) {\r\n    const locals = injector(container);\r\n    const allKeys = uniq([\r\n        ...Reflect.ownKeys(container.cradle),\r\n        ...Reflect.ownKeys(locals)\r\n    ]);\r\n    // TODO: Lots of duplication here from the container proxy.\r\n    // Need to refactor.\r\n    const proxy = new Proxy({}, {\r\n        /**\r\n         * Resolves the value by first checking the locals, then the container.\r\n         */\r\n        get(target, name) {\r\n            if (name === Symbol.iterator) {\r\n                return function* iterateRegistrationsAndLocals() {\r\n                    for (const prop in container.cradle) {\r\n                        yield prop;\r\n                    }\r\n                    for (const prop in locals) {\r\n                        yield prop;\r\n                    }\r\n                };\r\n            }\r\n            if (name in locals) {\r\n                return locals[name];\r\n            }\r\n            return container.resolve(name);\r\n        },\r\n        /**\r\n         * Used for `Object.keys`.\r\n         */\r\n        ownKeys() {\r\n            return allKeys;\r\n        },\r\n        /**\r\n         * Used for `Object.keys`.\r\n         */\r\n        getOwnPropertyDescriptor(target, key) {\r\n            if (allKeys.indexOf(key) > -1) {\r\n                return {\r\n                    enumerable: true,\r\n                    configurable: true\r\n                };\r\n            }\r\n            return undefined;\r\n        }\r\n    });\r\n    return proxy;\r\n}\r\n/**\r\n * Returns a resolve function used to construct the dependency graph\r\n *\r\n * @this {Registration}\r\n * The `this` context is a resolver.\r\n *\r\n * @param {Function} fn\r\n * The function to construct\r\n *\r\n * @param {Function} dependencyParseTarget\r\n * The function to parse for the dependencies of the construction target\r\n *\r\n * @param {boolean} isFunction\r\n * Is the resolution target an actual function or a mask for a constructor?\r\n *\r\n * @return {Function}\r\n * The function used for dependency resolution\r\n */\r\nfunction generateResolve(fn, dependencyParseTarget) {\r\n    // If the function used for dependency parsing is falsy, use the supplied function\r\n    if (!dependencyParseTarget) {\r\n        dependencyParseTarget = fn;\r\n    }\r\n    // Parse out the dependencies\r\n    // NOTE: we do this regardless of whether PROXY is used or not,\r\n    // because if this fails, we want it to fail early (at startup) rather\r\n    // than at resolution time.\r\n    const dependencies = parseDependencies(dependencyParseTarget);\r\n    // Use a regular function instead of an arrow function to facilitate binding to the resolver.\r\n    return function resolve(container) {\r\n        // Because the container holds a global reolutionMode we need to determine it in the proper order of precedence:\r\n        // resolver -> container -> default value\r\n        const injectionMode = this.injectionMode ||\r\n            container.options.injectionMode ||\r\n            InjectionMode.PROXY;\r\n        if (injectionMode !== InjectionMode.CLASSIC) {\r\n            // If we have a custom injector, we need to wrap the cradle.\r\n            const cradle = this.injector\r\n                ? createInjectorProxy(container, this.injector)\r\n                : container.cradle;\r\n            // Return the target injected with the cradle\r\n            return fn(cradle);\r\n        }\r\n        // We have dependencies so we need to resolve them manually\r\n        if (dependencies.length > 0) {\r\n            const resolve = this.injector\r\n                ? wrapWithLocals(container, this.injector(container))\r\n                : container.resolve;\r\n            const children = dependencies.map(p => resolve(p.name, { allowUnregistered: p.optional }));\r\n            return fn(...children);\r\n        }\r\n        return fn();\r\n    };\r\n}\r\n/**\r\n * Parses the dependencies from the given function.\r\n * If it's a class and has an extends clause, and no reported dependencies, attempt to parse it's super constructor.\r\n */\r\nfunction parseDependencies(fn) {\r\n    const result = parseParameterList(fn.toString());\r\n    if (result.length > 0) {\r\n        return result;\r\n    }\r\n    const parent = Object.getPrototypeOf(fn);\r\n    if (typeof parent === 'function' && parent !== Function.prototype) {\r\n        // Try to parse the parent\r\n        return parseDependencies(parent);\r\n    }\r\n    return result;\r\n}\n\nconst camelCase = require('camel-case');\r\nconst nameFormatters = {\r\n    camelCase\r\n};\r\n/**\r\n * Given an array of glob strings, will call `require`\r\n * on them, and call their default exported function with the\r\n * container as the first parameter.\r\n *\r\n * @param  {AwilixContainer} dependencies.container\r\n * The container to install loaded modules in.\r\n *\r\n * @param  {Function} dependencies.listModules\r\n * The listModules function to use for listing modules.\r\n *\r\n * @param  {Function} dependencies.require\r\n * The require function - it's a dependency because it makes testing easier.\r\n *\r\n * @param  {String[]} globPatterns\r\n * The array of globs to use when loading modules.\r\n *\r\n * @param  {Object} opts\r\n * Passed to `listModules`, e.g. `{ cwd: '...' }`.\r\n *\r\n * @param  {(string, ModuleDescriptor) => string} opts.formatName\r\n * Used to format the name the module is registered with in the container.\r\n *\r\n * @return {Object}\r\n * Returns an object describing the result.\r\n */\r\nfunction loadModules(dependencies, globPatterns, opts) {\r\n    const container = dependencies.container;\r\n    opts = optsWithDefaults(opts, container);\r\n    const modules = dependencies.listModules(globPatterns, opts);\r\n    const result = modules.map(m => {\r\n        const items = [];\r\n        const loaded = dependencies.require(m.path);\r\n        // Meh, it happens.\r\n        if (!loaded) {\r\n            return items;\r\n        }\r\n        if (isFunction(loaded)) {\r\n            // for module.exports = ...\r\n            items.push({\r\n                name: m.name,\r\n                path: m.path,\r\n                value: loaded,\r\n                opts: m.opts\r\n            });\r\n            return items;\r\n        }\r\n        if (loaded.default && isFunction(loaded.default)) {\r\n            // ES6 default export\r\n            items.push({\r\n                name: m.name,\r\n                path: m.path,\r\n                value: loaded.default,\r\n                opts: m.opts\r\n            });\r\n        }\r\n        // loop through non-default exports, but require the RESOLVER property set for\r\n        // it to be a valid service module export.\r\n        for (const key of Object.keys(loaded)) {\r\n            if (key === 'default') {\r\n                // default case handled separately due to its different name (file name)\r\n                continue;\r\n            }\r\n            if (isFunction(loaded[key]) && RESOLVER in loaded[key]) {\r\n                items.push({\r\n                    name: key,\r\n                    path: m.path,\r\n                    value: loaded[key],\r\n                    opts: m.opts\r\n                });\r\n            }\r\n        }\r\n        return items;\r\n    });\r\n    result\r\n        .reduce((acc, cur) => acc.concat(cur), [])\r\n        .filter(x => x)\r\n        .forEach(registerDescriptor.bind(null, container, opts));\r\n    return {\r\n        loadedModules: modules\r\n    };\r\n}\r\n/**\r\n * Returns a new options object with defaults applied.\r\n */\r\nfunction optsWithDefaults(opts, container) {\r\n    return Object.assign({ \r\n        // Does a somewhat-deep merge on the registration options.\r\n        resolverOptions: Object.assign({ lifetime: Lifetime.TRANSIENT }, (opts && opts.resolverOptions)) }, opts);\r\n}\r\n/**\r\n * Given a module descriptor, reads it and registers it's value with the container.\r\n *\r\n * @param {AwilixContainer} container\r\n * @param {LoadModulesOptions} opts\r\n * @param {ModuleDescriptor} moduleDescriptor\r\n */\r\nfunction registerDescriptor(container, opts, moduleDescriptor) {\r\n    const inlineConfig = moduleDescriptor.value[RESOLVER];\r\n    let name = inlineConfig && inlineConfig.name;\r\n    if (!name) {\r\n        name = moduleDescriptor.name;\r\n        let formatter = opts.formatName;\r\n        if (formatter) {\r\n            if (typeof formatter === 'string') {\r\n                formatter = nameFormatters[formatter];\r\n            }\r\n            if (formatter) {\r\n                name = formatter(name, moduleDescriptor);\r\n            }\r\n        }\r\n    }\r\n    let moduleDescriptorOpts = moduleDescriptor.opts;\r\n    if (typeof moduleDescriptorOpts === 'string') {\r\n        moduleDescriptorOpts = { lifetime: moduleDescriptorOpts };\r\n    }\r\n    const regOpts = Object.assign({}, opts.resolverOptions, moduleDescriptorOpts, inlineConfig);\r\n    const reg = regOpts.register\r\n        ? regOpts.register\r\n        : isClass(moduleDescriptor.value)\r\n            ? asClass\r\n            : asFunction;\r\n    container.register(name, reg(moduleDescriptor.value, regOpts));\r\n}\n\n/**\r\n * Family tree symbol.\r\n * @type {Symbol}\r\n */\r\nconst FAMILY_TREE = Symbol('familyTree');\r\n/**\r\n * Roll Up Registrations symbol.\r\n * @type {Symbol}\r\n */\r\nconst ROLL_UP_REGISTRATIONS = Symbol('rollUpRegistrations');\r\n/**\r\n * Creates an Awilix container instance.\r\n *\r\n * @param {Function} options.require\r\n * The require function to use. Defaults to require.\r\n *\r\n * @param {string} options.injectionMode\r\n * The mode used by the container to resolve dependencies. Defaults to 'Proxy'.\r\n *\r\n * @return {object}\r\n * The container.\r\n */\r\nfunction createContainer(options, parentContainer) {\r\n    options = Object.assign({ injectionMode: InjectionMode.PROXY }, options);\r\n    // The resolution stack is used to keep track\r\n    // of what modules are being resolved, so when\r\n    // an error occurs, we have something to present\r\n    // to the poor developer who fucked up.\r\n    let resolutionStack = [];\r\n    // For performance reasons, we store\r\n    // the rolled-up registrations when starting a resolve.\r\n    let computedRegistrations = null;\r\n    // Internal registration store for this container.\r\n    const registrations = {};\r\n    /**\r\n     * The `Proxy` that is passed to functions so they can resolve their dependencies without\r\n     * knowing where they come from. I call it the \"cradle\" because\r\n     * it is where registered things come to life at resolution-time.\r\n     */\r\n    const cradle = new Proxy({\r\n        [inspect.custom]: inspectCradle\r\n    }, {\r\n        /**\r\n         * The `get` handler is invoked whenever a get-call for `container.cradle.*` is made.\r\n         *\r\n         * @param  {object} target\r\n         * The proxy target. Irrelevant.\r\n         *\r\n         * @param  {string} name\r\n         * The property name.\r\n         *\r\n         * @return {*}\r\n         * Whatever the resolve call returns.\r\n         */\r\n        get: (target, name) => resolve(name),\r\n        /**\r\n         * Setting things on the cradle throws an error.\r\n         *\r\n         * @param  {object} target\r\n         * @param  {string} name\r\n         */\r\n        set: (_target, name, value) => {\r\n            throw new Error(`Attempted setting property \"${name}\" on container cradle - this is not allowed.`);\r\n        },\r\n        /**\r\n         * Used for `Object.keys`.\r\n         */\r\n        ownKeys() {\r\n            return Array.from(cradle);\r\n        },\r\n        /**\r\n         * Used for `Object.keys`.\r\n         */\r\n        getOwnPropertyDescriptor(target, key) {\r\n            const regs = rollUpRegistrations();\r\n            if (Object.getOwnPropertyDescriptor(regs, key)) {\r\n                return {\r\n                    enumerable: true,\r\n                    configurable: true\r\n                };\r\n            }\r\n            return undefined;\r\n        }\r\n    });\r\n    // The container being exposed.\r\n    const container = {\r\n        options,\r\n        cradle: cradle,\r\n        inspect: inspect$1,\r\n        cache: new Map(),\r\n        loadModules: loadModules$1,\r\n        createScope,\r\n        register: register,\r\n        build,\r\n        resolve,\r\n        has,\r\n        dispose,\r\n        [inspect.custom]: inspect$1,\r\n        // tslint:disable-next-line\r\n        [ROLL_UP_REGISTRATIONS]: rollUpRegistrations,\r\n        get registrations() {\r\n            return rollUpRegistrations();\r\n        }\r\n    };\r\n    // Track the family tree.\r\n    const familyTree = parentContainer\r\n        ? [container].concat(parentContainer[FAMILY_TREE])\r\n        : [container];\r\n    container[FAMILY_TREE] = familyTree;\r\n    // We need a reference to the root container,\r\n    // so we can retrieve and store singletons.\r\n    const rootContainer = last(familyTree);\r\n    return container;\r\n    /**\r\n     * Used by util.inspect (which is used by console.log).\r\n     */\r\n    function inspect$1(depth, opts) {\r\n        return `[AwilixContainer (${parentContainer ? 'scoped, ' : ''}registrations: ${Object.keys(container.registrations).length})]`;\r\n    }\r\n    /**\r\n     * Rolls up registrations from the family tree.\r\n     * This is cached until `bustCache` clears it.\r\n     *\r\n     * @param {boolean} bustCache\r\n     * Forces a recomputation.\r\n     *\r\n     * @return {object}\r\n     * The merged registrations object.\r\n     */\r\n    function rollUpRegistrations(bustCache = false) {\r\n        if (computedRegistrations && !bustCache) {\r\n            return computedRegistrations;\r\n        }\r\n        computedRegistrations = Object.assign({}, (parentContainer &&\r\n            parentContainer[ROLL_UP_REGISTRATIONS](bustCache)), registrations);\r\n        return computedRegistrations;\r\n    }\r\n    /**\r\n     * Used for providing an iterator to the cradle.\r\n     */\r\n    function* registrationNamesIterator() {\r\n        const registrations = rollUpRegistrations();\r\n        for (const registrationName in registrations) {\r\n            yield registrationName;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a scoped container.\r\n     *\r\n     * @return {object}\r\n     * The scoped container.\r\n     */\r\n    function createScope() {\r\n        return createContainer(options, container);\r\n    }\r\n    /**\r\n     * Adds a registration for a resolver.\r\n     */\r\n    function register(arg1, arg2) {\r\n        const obj = nameValueToObject(arg1, arg2);\r\n        const keys = [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];\r\n        for (const key of keys) {\r\n            const value = obj[key];\r\n            registrations[key] = value;\r\n        }\r\n        // Invalidates the computed registrations.\r\n        computedRegistrations = null;\r\n        return container;\r\n    }\r\n    /**\r\n     * Returned to `util.inspect` when attempting to resolve\r\n     * a custom inspector function on the cradle.\r\n     */\r\n    function inspectCradle() {\r\n        return '[AwilixContainer.cradle]';\r\n    }\r\n    /**\r\n     * Resolves the registration with the given name.\r\n     *\r\n     * @param {string | symbol} name\r\n     * The name of the registration to resolve.\r\n     *\r\n     * @param {ResolveOptions} resolveOpts\r\n     * The resolve options.\r\n     *\r\n     * @return {any}\r\n     * Whatever was resolved.\r\n     */\r\n    function resolve(name, resolveOpts) {\r\n        resolveOpts = resolveOpts || {};\r\n        if (!resolutionStack.length) {\r\n            // Root resolve busts the registration cache.\r\n            rollUpRegistrations(true);\r\n        }\r\n        try {\r\n            // Grab the registration by name.\r\n            const resolver = computedRegistrations[name];\r\n            if (resolutionStack.indexOf(name) > -1) {\r\n                throw new AwilixResolutionError(name, resolutionStack, 'Cyclic dependencies detected.');\r\n            }\r\n            // Used in console.log.\r\n            if (name === 'constructor') {\r\n                return createContainer;\r\n            }\r\n            if (!resolver) {\r\n                // The following checks ensure that console.log on the cradle does not\r\n                // throw an error (issue #7).\r\n                if (name === inspect.custom || name === 'inspect') {\r\n                    return inspectCradle;\r\n                }\r\n                // Edge case: Promise unwrapping will look for a \"then\" property and attempt to call it.\r\n                // Return undefined so that we won't cause a resolution error. (issue #109)\r\n                if (name === 'then') {\r\n                    return undefined;\r\n                }\r\n                // When using `Array.from` or spreading the cradle, this will\r\n                // return the registration names.\r\n                if (name === Symbol.iterator) {\r\n                    return registrationNamesIterator;\r\n                }\r\n                if (resolveOpts.allowUnregistered) {\r\n                    return undefined;\r\n                }\r\n                throw new AwilixResolutionError(name, resolutionStack);\r\n            }\r\n            // Pushes the currently-resolving module name onto the stack\r\n            resolutionStack.push(name);\r\n            // Do the thing\r\n            let cached;\r\n            let resolved;\r\n            switch (resolver.lifetime || Lifetime.TRANSIENT) {\r\n                case Lifetime.TRANSIENT:\r\n                    // Transient lifetime means resolve every time.\r\n                    resolved = resolver.resolve(container);\r\n                    break;\r\n                case Lifetime.SINGLETON:\r\n                    // Singleton lifetime means cache at all times, regardless of scope.\r\n                    cached = rootContainer.cache.get(name);\r\n                    if (!cached) {\r\n                        resolved = resolver.resolve(container);\r\n                        rootContainer.cache.set(name, { resolver, value: resolved });\r\n                    }\r\n                    else {\r\n                        resolved = cached.value;\r\n                    }\r\n                    break;\r\n                case Lifetime.SCOPED:\r\n                    // Scoped lifetime means that the container\r\n                    // that resolves the registration also caches it.\r\n                    // When a registration is not found, we travel up\r\n                    // the family tree until we find one that is cached.\r\n                    cached = container.cache.get(name);\r\n                    if (cached !== undefined) {\r\n                        // We found one!\r\n                        resolved = cached.value;\r\n                        break;\r\n                    }\r\n                    // If we still have not found one, we need to resolve and cache it.\r\n                    resolved = resolver.resolve(container);\r\n                    container.cache.set(name, { resolver, value: resolved });\r\n                    break;\r\n                default:\r\n                    throw new AwilixResolutionError(name, resolutionStack, `Unknown lifetime \"${resolver.lifetime}\"`);\r\n            }\r\n            // Pop it from the stack again, ready for the next resolution\r\n            resolutionStack.pop();\r\n            return resolved;\r\n        }\r\n        catch (err) {\r\n            // When we get an error we need to reset the stack.\r\n            resolutionStack = [];\r\n            throw err;\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the registration with the given name exists.\r\n     *\r\n     * @param {string | symbol} name\r\n     * The name of the registration to resolve.\r\n     *\r\n     * @return {boolean}\r\n     * Whether or not the registration exists.\r\n     */\r\n    function has(name) {\r\n        return name in rollUpRegistrations();\r\n    }\r\n    /**\r\n     * Given a registration, class or function, builds it up and returns it.\r\n     * Does not cache it, this means that any lifetime configured in case of passing\r\n     * a registration will not be used.\r\n     *\r\n     * @param {Resolver|Class|Function} targetOrResolver\r\n     * @param {ResolverOptions} opts\r\n     */\r\n    function build(targetOrResolver, opts) {\r\n        if (targetOrResolver && targetOrResolver.resolve) {\r\n            return targetOrResolver.resolve(container);\r\n        }\r\n        const funcName = 'build';\r\n        const paramName = 'targetOrResolver';\r\n        AwilixTypeError.assert(targetOrResolver, funcName, paramName, 'a registration, function or class', targetOrResolver);\r\n        AwilixTypeError.assert(typeof targetOrResolver === 'function', funcName, paramName, 'a function or class', targetOrResolver);\r\n        const resolver = isClass(targetOrResolver)\r\n            ? asClass(targetOrResolver, opts)\r\n            : asFunction(targetOrResolver, opts);\r\n        return resolver.resolve(container);\r\n    }\r\n    /**\r\n     * Binds `lib/loadModules` to this container, and provides\r\n     * real implementations of it's dependencies.\r\n     *\r\n     * Additionally, any modules using the `dependsOn` API\r\n     * will be resolved.\r\n     *\r\n     * @see lib/loadModules.js documentation.\r\n     */\r\n    function loadModules$1(globPatterns, opts) {\r\n        const _loadModulesDeps = {\r\n            require: options.require ||\r\n                function (uri) {\r\n                    return require(uri);\r\n                },\r\n            listModules,\r\n            container\r\n        };\r\n        loadModules(_loadModulesDeps, globPatterns, opts);\r\n        return container;\r\n    }\r\n    /**\r\n     * Disposes this container and it's children, calling the disposer\r\n     * on all disposable registrations and clearing the cache.\r\n     */\r\n    function dispose() {\r\n        const entries = Array.from(container.cache.entries());\r\n        container.cache.clear();\r\n        return Promise.all(entries.map(([name, entry]) => {\r\n            const { resolver, value } = entry;\r\n            const disposable = resolver;\r\n            if (disposable.dispose) {\r\n                return Promise.resolve().then(() => disposable.dispose(value));\r\n            }\r\n            return Promise.resolve();\r\n        })).then(() => undefined);\r\n    }\r\n}\n\nexport { AwilixError, AwilixResolutionError, AwilixTypeError, ExtendableError, InjectionMode, Lifetime, RESOLVER, aliasTo, asClass, asFunction, asValue, createBuildResolver, createContainer, createDisposableResolver, listModules };\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","try {\n  var util = require('util');\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  module.exports = require('./inherits_browser.js');\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","module.exports = require(\"events\");","module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar alphasort = common.alphasort\nvar alphasorti = common.alphasorti\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = rp.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  if (isIgnored(this, e))\n    return\n\n  var abs = this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute) {\n    e = abs\n  }\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      // lstat failed, doesn't exist\n      return null\n    }\n  }\n\n  var isSym = lstat && lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && lstat && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        throw error\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n        this.statCache[abs] = false\n        return false\n      }\n    }\n\n    if (lstat && lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n","var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n\n    // XXX It's somewhat ambiguous whether a new callback added in this\n    // pass should be queued for later execution if something in the\n    // list of callbacks throws, or if it should just be discarded.\n    // However, it's such an edge case that it hardly matters, and either\n    // choice is likely as surprising as the other.\n    // As it happens, we do go ahead and schedule it for later execution.\n    try {\n      for (var i = 0; i < len; i++) {\n        cbs[i].apply(null, args)\n      }\n    } finally {\n      if (cbs.length > len) {\n        // added more in the interim.\n        // de-zalgo, just in case, but don't call again.\n        cbs.splice(0, len)\n        process.nextTick(function () {\n          RES.apply(null, args)\n        })\n      } else {\n        delete reqs[key]\n      }\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n","var upperCase = require('upper-case')\nvar noCase = require('no-case')\n\n/**\n * Camel case a string.\n *\n * @param  {string} value\n * @param  {string} [locale]\n * @return {string}\n */\nmodule.exports = function (value, locale, mergeNumbers) {\n  var result = noCase(value, locale)\n\n  // Replace periods between numeric entities with an underscore.\n  if (!mergeNumbers) {\n    result = result.replace(/ (?=\\d)/g, '_')\n  }\n\n  // Replace spaces between words with an upper cased character.\n  return result.replace(/ (.)/g, function (m, $1) {\n    return upperCase($1, locale)\n  })\n}\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  az: {\n    regexp: /[\\u0069]/g,\n    map: {\n      '\\u0069': '\\u0130'\n    }\n  },\n  lt: {\n    regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n    map: {\n      '\\u0069\\u0307': '\\u0049',\n      '\\u006A\\u0307': '\\u004A',\n      '\\u012F\\u0307': '\\u012E',\n      '\\u0069\\u0307\\u0300': '\\u00CC',\n      '\\u0069\\u0307\\u0301': '\\u00CD',\n      '\\u0069\\u0307\\u0303': '\\u0128'\n    }\n  }\n}\n\n/**\n * Upper case a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toUpperCase()\n}\n","var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement\n\n  function replace (match, index, value) {\n    if (index === 0 || index === (value.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n    .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n","/**\n * Special language-specific overrides.\n *\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n *\n * @type {Object}\n */\nvar LANGUAGES = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  az: {\n    regexp: /[\\u0130]/g,\n    map: {\n      '\\u0130': '\\u0069',\n      '\\u0049': '\\u0131',\n      '\\u0049\\u0307': '\\u0069'\n    }\n  },\n  lt: {\n    regexp: /[\\u0049\\u004A\\u012E\\u00CC\\u00CD\\u0128]/g,\n    map: {\n      '\\u0049': '\\u0069\\u0307',\n      '\\u004A': '\\u006A\\u0307',\n      '\\u012E': '\\u012F\\u0307',\n      '\\u00CC': '\\u0069\\u0307\\u0300',\n      '\\u00CD': '\\u0069\\u0307\\u0301',\n      '\\u0128': '\\u0069\\u0307\\u0303'\n    }\n  }\n}\n\n/**\n * Lowercase a string.\n *\n * @param  {String} str\n * @return {String}\n */\nmodule.exports = function (str, locale) {\n  var lang = LANGUAGES[locale]\n\n  str = str == null ? '' : String(str)\n\n  if (lang) {\n    str = str.replace(lang.regexp, function (m) { return lang.map[m] })\n  }\n\n  return str.toLowerCase()\n}\n","module.exports = /[^A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]+/g\n","module.exports = /([a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])/g\n","module.exports = /([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A])([A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AD\\uA7B0-\\uA7B4\\uA7B6\\uFF21-\\uFF3A][a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A])/g\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 31;","import * as vscode from 'vscode';\r\n\r\nimport { IVsCodeApi } from './abstractions/vs-code-api.interface';\r\nimport { IDisposable } from './abstractions/disposable.interface';\r\nimport { AutoBarrelSettings } from './models/auto-barrel-settings';\r\nimport { defaultSettings } from './default-settings';\r\nimport { StatementDetails } from './models/statement-details';\r\n\r\nexport class VsCodeApi implements IVsCodeApi {\r\n\r\n    public async appendStatementToBarrel(barrelFilePath: string, statementDetails: StatementDetails): Promise<void> {\r\n        const document = await this.openTextDocument(barrelFilePath);\r\n        if (document.lineCount >= 1) {\r\n            if (document.lineAt(0).text.indexOf('auto-barrel-ignore') !== -1) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let lastLineWithContent = document.lineCount  - 1;\r\n        for (let i = lastLineWithContent; i > 0; i--) {\r\n            if(document.lineAt(i).text.length) {\r\n                lastLineWithContent = i;\r\n                break;\r\n            }\r\n        }\r\n        const newLinePosition = new vscode.Position(lastLineWithContent + 1, 0);\r\n        const barrelFileUri = vscode.Uri.file(barrelFilePath);\r\n        const workspaceEdit = new vscode.WorkspaceEdit();\r\n        if (statementDetails.alias) {\r\n            const aliasLine = document.lineAt(lastLineWithContent);\r\n            const originalAliasStatement = aliasLine.text;\r\n            const newAliasStatement = originalAliasStatement.replace(' };', `, ${statementDetails.alias} };`);\r\n            workspaceEdit.replace(barrelFileUri, aliasLine.range, statementDetails.statement);\r\n            workspaceEdit.insert(barrelFileUri, newLinePosition, newAliasStatement);\r\n        } else {\r\n            workspaceEdit.insert(barrelFileUri, newLinePosition, statementDetails.statement);\r\n        }\r\n\r\n        if(statementDetails.isBarrelImport) {\r\n            const barrelStatementPrefix = statementDetails.statement.substr(0, statementDetails.statement.length - 2);\r\n            for (let i = 0; i < document.lineCount; i++) {\r\n                const line = document.lineAt(i);\r\n                if(line.text.indexOf(barrelStatementPrefix) !== -1) {\r\n                    workspaceEdit.delete(barrelFileUri, line.rangeIncludingLineBreak);\r\n                }              \r\n            }\r\n        }\r\n\r\n        const result = await vscode.workspace.applyEdit(workspaceEdit);\r\n        if (result) {\r\n          await vscode.window.showInformationMessage(`The new file was added to ${barrelFilePath}`, {\r\n            modal: false\r\n          });\r\n\r\n        } else {\r\n          await vscode.window.showWarningMessage(`Unable to add the new file to ${barrelFilePath}`, {\r\n            modal: false\r\n          });\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public createFileSystemWatcher(globPattern: string, onCreated: (path: string) => void, onDelete: (path: string) => void): IDisposable {\r\n        const relativeGlobPattern = new vscode.RelativePattern(vscode.workspace.rootPath, globPattern);\r\n        const result = vscode.workspace.createFileSystemWatcher(relativeGlobPattern, false, true, false);\r\n\r\n        result.onDidCreate((uri: vscode.Uri) => {\r\n            onCreated(uri.path);\r\n        });\r\n        result.onDidDelete((uri: vscode.Uri) => onDelete(uri.path));\r\n\r\n        return result;\r\n    }\r\n\r\n    public async findSupportedFiles(folderPath: string): Promise<Array<string>> {\r\n        const files = await vscode.workspace.findFiles(new vscode.RelativePattern(folderPath, '**/*.{js,jsx,ts,tsx}'));\r\n        return files.map(f => f.path);\r\n    }\r\n\r\n    public async findFiles(searchGlob: string): Promise<Array<string>> {\r\n        const files = await vscode.workspace.findFiles(searchGlob);\r\n        return files.map(f => f.path);\r\n    }\r\n\r\n    public getConfiguration(): AutoBarrelSettings {\r\n        const config = vscode.workspace.getConfiguration('autoBarrel');\r\n        if (typeof config === 'undefined') {\r\n            return defaultSettings;\r\n        }\r\n\r\n        const defaultLanguage = config.get<string>('defaultLanguage');\r\n        const defaultExtension = defaultLanguage === 'JavaScript' ? 'js' : 'ts';\r\n\r\n        return {\r\n            defaultExtension: defaultExtension,\r\n            alwaysUseDefaultLanguage: getSettingOrDefault<boolean>(config, 'alwaysUseDefaultLanguage'),\r\n            watchGlob: getSettingOrDefault<string>(config, 'watchGlob'),\r\n            ignoreFilePathContainingAnyOf: getSettingOrDefault<string>(config, 'ignoreFilePathContainingAnyOf'),\r\n            useImportAliasExportPattern: getSettingOrDefault<boolean>(config, 'useImportAliasExportPattern'),\r\n            disableRecursiveBarrelling: getSettingOrDefault<boolean>(config, 'disableRecursiveBarrelling')\r\n        };\r\n\r\n        function getSettingOrDefault<T extends string | boolean>(config: vscode.WorkspaceConfiguration, section: string): T {\r\n            const configSetting = config.get<T>(section);\r\n            if (typeof configSetting !== 'undefined') {\r\n                return configSetting as T;\r\n            }\r\n            return defaultSettings[section] as T;\r\n        }\r\n    }\r\n\r\n    public async getDocumentText(filePath: string): Promise<string> {\r\n        const uri = vscode.Uri.file(filePath);\r\n        const document = await vscode.workspace.openTextDocument(uri);\r\n        return document.getText();\r\n    }\r\n    \r\n    public async removeStatementFromBarrel(barrelFilePath: string, statementSuffix: string): Promise<void> {\r\n        const document = await this.openTextDocument(barrelFilePath);\r\n\r\n        let lineToRemove: vscode.TextLine;\r\n        let aliasLine: vscode.TextLine;\r\n\r\n        for(let i = 0; i < document.lineCount; i++) {\r\n            const documentLine = document.lineAt(i);\r\n            const lineText = documentLine.text;\r\n            if(lineText.indexOf(statementSuffix) !== -1) {\r\n                lineToRemove = documentLine;\r\n            }\r\n\r\n            if(lineText.indexOf('export { ') !== -1) {\r\n                aliasLine = documentLine;\r\n            }\r\n        }\r\n\r\n        if(typeof lineToRemove === 'undefined') {\r\n            await vscode.window.showWarningMessage(`Could not find ${statementSuffix} in ${barrelFilePath}`);\r\n            return;\r\n        }\r\n\r\n        const barrelFileUri = vscode.Uri.file(barrelFilePath);\r\n        const workspaceEdit = new vscode.WorkspaceEdit();\r\n        \r\n        if(lineToRemove.text.indexOf('import * as ') !== -1) {\r\n            if(typeof aliasLine === 'undefined') {\r\n                await vscode.window.showWarningMessage(`Could not find alias statement in ${barrelFilePath}`);\r\n                return;\r\n            }\r\n            const alias = lineToRemove.text.split(' ')[3];\r\n            const newAliasText = aliasLine.text.replace(`, ${alias}`, '');\r\n            workspaceEdit.replace(barrelFileUri, aliasLine.range, newAliasText);\r\n        }\r\n        workspaceEdit.delete(barrelFileUri, lineToRemove.rangeIncludingLineBreak);        \r\n\r\n        const result = await vscode.workspace.applyEdit(workspaceEdit);\r\n        if (result) {\r\n          await vscode.window.showInformationMessage(`The file was removed from ${barrelFilePath}`, {\r\n            modal: false\r\n          });\r\n\r\n        } else {\r\n          await vscode.window.showWarningMessage(`Unable to remove the file from ${barrelFilePath}`, {\r\n            modal: false\r\n          });\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    public async showInformationMessage(message: string): Promise<string> {\r\n        return vscode.window.showInformationMessage(message);\r\n    }\r\n\r\n    public async showErrorMessage(message: string): Promise<string> {\r\n        return vscode.window.showErrorMessage(message);\r\n    }\r\n\r\n    public async showWarningMessage(message: string): Promise<string> {\r\n        return vscode.window.showWarningMessage(message);\r\n    }\r\n\r\n    public async writeFile(filePath: string, contentLines: Array<string>): Promise<void> {\r\n        const fileUri = vscode.Uri.file(filePath);\r\n        const workspaceEdit = new vscode.WorkspaceEdit();\r\n        workspaceEdit.createFile(fileUri);\r\n\r\n        for (let i = 0; i < contentLines.length; i++) {\r\n            const line = contentLines[i];\r\n            workspaceEdit.insert(fileUri, new vscode.Position(i, 0), `${line}\\n`);\r\n        }\r\n\r\n        try {\r\n            const result = await vscode.workspace.applyEdit(workspaceEdit);\r\n            if (result === true) {\r\n                await vscode.window.showInformationMessage(`Barrel ${filePath} was created successfully`);\r\n            } else {\r\n                await vscode.window.showWarningMessage('The barrel file was not created as expected');\r\n            }\r\n        } catch (error) {\r\n            await vscode.window.showErrorMessage(`Creating barrel file failed:  ${error}`);\r\n        }\r\n    }\r\n\r\n    private async openTextDocument(filePath: string): Promise<vscode.TextDocument> {\r\n        const uri = vscode.Uri.file(filePath);\r\n        return vscode.workspace.openTextDocument(uri);\r\n    }\r\n}","import { AutoBarrelSettings } from './models/auto-barrel-settings';\r\n\r\nexport const defaultSettings: AutoBarrelSettings = {\r\n    defaultExtension: 'ts',\r\n    alwaysUseDefaultLanguage: false,\r\n    watchGlob: 'src/**/*.{js,jsx,ts,tsx}',\r\n    ignoreFilePathContainingAnyOf: '.spec,.test',\r\n    useImportAliasExportPattern: false,\r\n    disableRecursiveBarrelling: false\r\n};","import { IConfiguration } from './abstractions/configuration.interface';\r\nimport { IVsCodeApi } from './abstractions/vs-code-api.interface';\r\nimport { AutoBarrelSettings } from './models/auto-barrel-settings';\r\n\r\nexport class Configuration implements IConfiguration {\r\n    constructor(private vsCodeApi: IVsCodeApi) {\r\n    }\r\n\r\n    public get current(): AutoBarrelSettings {\r\n        return this.vsCodeApi.getConfiguration();\r\n    }\r\n\r\n    public get defaultExtension(): string {\r\n        return this.current.defaultExtension;\r\n    }\r\n\r\n    public get alwaysUseDefaultLanguage(): boolean {\r\n        return this.current.alwaysUseDefaultLanguage;\r\n    }\r\n\r\n    public get watchGlob(): string {\r\n        return this.current.watchGlob;\r\n    }\r\n\r\n    public get ignoreFilePathContainingAnyOf(): string {\r\n        return this.current.ignoreFilePathContainingAnyOf;\r\n    }\r\n\r\n    public get useImportAliasExportPattern(): boolean {\r\n        return this.current.useImportAliasExportPattern;\r\n    }\r\n\r\n    public get disableRecursiveBarrelling(): boolean {\r\n        return this.current.disableRecursiveBarrelling;\r\n    }\r\n}","import * as path from 'path';\r\n\r\nimport { IUtility } from './abstractions/utlity.interface';\r\nimport { IConfiguration } from './abstractions/configuration.interface';\r\nimport { IVsCodeApi } from './abstractions/vs-code-api.interface';\r\nimport { supportedExtensions } from './supported-extensions';\r\n\r\nexport class Utility implements IUtility {\r\n\r\n    constructor(private configuration: IConfiguration,\r\n        private vsCodeApi: IVsCodeApi) {\r\n    }\r\n\r\n    public buildAlias(filePath: string): string {\r\n        const baseName = path.basename(filePath, path.extname(filePath));\r\n        const aliasParts: string[] = [];\r\n        let nameParts: string[];\r\n        if(baseName.toLowerCase() === 'index') {\r\n            const pathParts = filePath.split('/');\r\n            const aliasBase = pathParts[pathParts.length - 2];\r\n            nameParts = [aliasBase];\r\n        } else {\r\n            nameParts  = baseName.split('.');\r\n        }\r\n\r\n        for (const part of nameParts) {\r\n            const partElements = part.split('-');\r\n            for (const element of partElements) {\r\n                aliasParts.push(element.charAt(0).toUpperCase() + element.slice(1));\r\n            }\r\n        }\r\n\r\n        return aliasParts.join('');\r\n    }\r\n\r\n    public async containsDefaultExport(filePath: string): Promise<boolean> {\r\n        const content = await this.vsCodeApi.getDocumentText(filePath);\r\n        return content.indexOf('export default') !== -1;\r\n    }\r\n\r\n    public async findClosestBarrel(filePath: string): Promise<string> {\r\n        const config = this.configuration.current;\r\n        const fileExtension = path.extname(filePath).substr(0, 3);\r\n        const barrelFileName = `index${fileExtension}`;\r\n\r\n        if (config.disableRecursiveBarrelling) {\r\n            const folderPath = path.dirname(filePath);\r\n            const barrelFilePath = `${folderPath}/${barrelFileName}`;\r\n            const barrelFiles = await this.vsCodeApi.findFiles(barrelFilePath);\r\n            if(barrelFiles.length > 0) {\r\n                return barrelFiles[0];\r\n            }\r\n        } else {\r\n            const watchGlob = config.watchGlob;\r\n            const lastSlashIndex = watchGlob.lastIndexOf('/');\r\n            const searchGlobBase = lastSlashIndex === -1 ? watchGlob : watchGlob.substr(0, lastSlashIndex + 1);\r\n            const searchGlob = `${searchGlobBase}${barrelFileName}`;\r\n            const barrelFiles = await this.vsCodeApi.findFiles(searchGlob);\r\n            if (barrelFiles.length > 0) {\r\n               let folder = this.getParentFolder(filePath);\r\n               if(path.basename(filePath, fileExtension)  === 'index') {\r\n                   folder = this.getParentFolder(folder);\r\n               }\r\n               let barrelPath = `${folder}/${barrelFileName}`;\r\n               let match = barrelFiles.find((f) => f === barrelPath);\r\n                while(!match){\r\n                    folder = this.getParentFolder(folder);\r\n                    barrelPath = `${folder}/${barrelFileName}`;\r\n                    match = barrelFiles.find((f) => f === barrelPath);\r\n                }\r\n                return match;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public getLanguageExtension(filePaths: Array<string>): 'ts' | 'js' {\r\n        const currentConfig = this.configuration.current;\r\n        if (currentConfig.alwaysUseDefaultLanguage === false) {\r\n            if (filePaths.every(f => f.endsWith('.ts') || f.endsWith('.tsx'))) {\r\n                return 'ts';\r\n            } else if (filePaths.every(f => f.endsWith('.js') || f.endsWith('.jsx'))) {\r\n                return 'js';\r\n            }\r\n        }\r\n\r\n        return currentConfig.defaultExtension;\r\n    }\r\n\r\n    public getLanguageExtensionFromFile(filePath: string): string {\r\n        return path.extname(filePath).substr(1, 2);\r\n    }\r\n\r\n    public pathContainsIgnoredFragment(filePath: string): boolean {\r\n        const ignoredFragmentsSetting = this.configuration.current.ignoreFilePathContainingAnyOf;\r\n        if (ignoredFragmentsSetting) {\r\n            const fragments = ignoredFragmentsSetting.split(',');\r\n            if (fragments && fragments.length) {\r\n                return fragments.some(f => filePath.indexOf(f) !== -1);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public shouldBeIncludedInBarrel(filePath: string, languageExtension: string): boolean {\r\n        const possibleExtensions = supportedExtensions[languageExtension];\r\n        const fileExtension = path.extname(filePath);\r\n\r\n        return possibleExtensions.indexOf(fileExtension) !== -1 && !this.pathContainsIgnoredFragment(filePath);\r\n    }\r\n\r\n    private getParentFolder(path: string) {\r\n        if(path.endsWith('/')) {\r\n            path = path.substr(0, path.length - 1);\r\n        }\r\n        \r\n        const lastSlashIndex = path.lastIndexOf('/');\r\n        if(lastSlashIndex !== -1) {\r\n            return path.substr(0, lastSlashIndex);\r\n        }\r\n\r\n        return path;\r\n    }\r\n}","export const supportedExtensions: { [index: string]: string[]; js: string[]; ts: string[]; } = {\r\n    js: ['.js', '.jsx'],\r\n    ts: ['.ts', '.tsx']\r\n  };","import { BarrelDetails } from './models/barrel-details';\r\nimport { IUtility } from './abstractions/utlity.interface';\r\nimport { IBarrelBuilder } from './abstractions/barrel-builder.interface';\r\nimport { IExportStatementBuilder } from './abstractions/export-statement-builder.interface';\r\nimport { StatementDetails } from './models/statement-details';\r\n\r\nexport class BarrelBuilder implements IBarrelBuilder {\r\n\r\n    constructor(private utility: IUtility,\r\n        private exportStatementBuilder: IExportStatementBuilder) {\r\n    }\r\n\r\n    public async build(rootFolderPath: string, filePaths: Array<string>): Promise<BarrelDetails> {\r\n        const languageExtension = this.utility.getLanguageExtension(filePaths);\r\n        const aliases: Array<string> = [];\r\n        const result = new Array<string>();\r\n        const exportStatements = new Array<StatementDetails>();\r\n\r\n        for (let i = 0; i < filePaths.length; i++) {\r\n            const filePath = filePaths[i];\r\n\r\n            if (!this.utility.shouldBeIncludedInBarrel(filePath, languageExtension)) {\r\n                continue;\r\n            }\r\n\r\n            const exportStatement = await this.exportStatementBuilder.build(rootFolderPath, filePath);\r\n            exportStatements.push(exportStatement);\r\n        }\r\n\r\n        for(let i = 0; i < exportStatements.length; i++) {\r\n           const exportStatement = exportStatements[i];\r\n            if (!barrelForStatementIsIncluded(exportStatement)) {\r\n                result.push(exportStatement.statement);\r\n                if (exportStatement.alias) {\r\n                    aliases.push(exportStatement.alias);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (aliases.length) {\r\n            result.push(`export { ${aliases.join(', ')} };`);\r\n        }\r\n\r\n        return {\r\n            barrelFilePath: `${rootFolderPath}/index.${languageExtension}`,\r\n            contentLines: result\r\n        };\r\n\r\n        function barrelForStatementIsIncluded(statementDetails: StatementDetails) {\r\n            if(statementDetails.isBarrelImport) {\r\n                return false;\r\n            }\r\n\r\n            const statement = statementDetails.statement;\r\n            const start = statement.indexOf('from');\r\n            const length = statement.lastIndexOf('/') - start;\r\n            const barrelImportSuffix = `${statement.substr(start, length)}'`;\r\n            \r\n            const barrelImport = exportStatements.find((s) => s.statement.indexOf(barrelImportSuffix) !== -1);\r\n            return typeof barrelImport !== 'undefined';\r\n        }\r\n    }\r\n}","import { IVsCodeApi } from './abstractions/vs-code-api.interface';\r\nimport { IBarrelBuilder } from './abstractions/barrel-builder.interface';\r\n\r\nexport class CreateBarrelCommand {\r\n    constructor(private vsCodeApi: IVsCodeApi,\r\n         private barrelBuilder: IBarrelBuilder) {\r\n    }\r\n\r\n    public async execute(rootFolder: string): Promise<void> {\r\n        const filePaths = await this.vsCodeApi.findSupportedFiles(rootFolder);\r\n        const barrelDetails = await this.barrelBuilder.build(rootFolder, filePaths);\r\n\r\n        return await this.vsCodeApi.writeFile(barrelDetails.barrelFilePath, barrelDetails.contentLines);\r\n    }\r\n}","import * as path from 'path';\r\n\r\nimport { IVsCodeApi } from './abstractions/vs-code-api.interface';\r\nimport { IConfiguration } from './abstractions/configuration.interface';\r\nimport { IDisposable } from './abstractions/disposable.interface';\r\nimport { IUtility } from './abstractions/utlity.interface';\r\nimport { IExportStatementBuilder } from './abstractions/export-statement-builder.interface';\r\n\r\nexport class AutoBarreller implements IDisposable {\r\n    private fileSystemWatcher: IDisposable;\r\n\r\n    constructor(private configuration: IConfiguration,\r\n        private vsCodeApi: IVsCodeApi,\r\n        private utility: IUtility,\r\n        private exportStatementBuilder: IExportStatementBuilder) { }\r\n\r\n    public start = async (): Promise<void> => {\r\n        if (this.isRunning()) {\r\n            await this.vsCodeApi.showWarningMessage('Auto Barrel is already running.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const configuration = this.configuration.current;\r\n            this.fileSystemWatcher = this.vsCodeApi.createFileSystemWatcher(configuration.watchGlob, this.handleFileCreated, this.handleFileDeleted);\r\n            await this.vsCodeApi.showInformationMessage('Auto Barrel was started successfully.');\r\n            return Promise.resolve();\r\n        } catch (err) {\r\n            console.log(err);\r\n            await this.vsCodeApi.showErrorMessage('Auto Barrel start failed, please check the console for more information.');\r\n        }\r\n    }\r\n\r\n    public stop = async (): Promise<void> => {\r\n        if (this.isRunning() === false) {\r\n            await this.vsCodeApi.showWarningMessage('Auto Barrel is not running, no action taken.');\r\n            return;\r\n        }\r\n\r\n        this.dispose();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public dispose = () => {\r\n        this.fileSystemWatcher.dispose();\r\n        this.fileSystemWatcher = undefined;\r\n    }\r\n\r\n\r\n    public handleFileCreated = async (filePath: string): Promise<void> => {\r\n        try {\r\n            if (this.utility.pathContainsIgnoredFragment(filePath) === true) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const barrelFilePath = await this.utility.findClosestBarrel(filePath);\r\n            if (typeof barrelFilePath === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            const languageExtension = path.extname(barrelFilePath).substr(1);\r\n            if (this.utility.shouldBeIncludedInBarrel(filePath, languageExtension) === false) {\r\n                return;\r\n            }\r\n\r\n            const barrelFolderPath = path.dirname(barrelFilePath);\r\n            const statementDetails = await this.exportStatementBuilder.build(barrelFolderPath, filePath);\r\n            return this.vsCodeApi.appendStatementToBarrel(barrelFilePath, statementDetails);\r\n        } catch (error) {\r\n            console.log(error);\r\n            return Promise.reject();\r\n        }\r\n    }\r\n\r\n    public handleFileDeleted = async (filePath: string): Promise<void> => {\r\n        try {\r\n            const barrelFilePath = await this.utility.findClosestBarrel(filePath);\r\n            if (typeof barrelFilePath === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            const barrelFolderPath = path.dirname(barrelFilePath);\r\n            const fileExtension = path.extname(filePath);\r\n            const fileRelativePath = path.relative(barrelFolderPath, filePath).replace(/\\\\/g, '/').replace(fileExtension, '');\r\n            const statementSuffix = `from './${fileRelativePath}'`;\r\n            return this.vsCodeApi.removeStatementFromBarrel(barrelFilePath, statementSuffix);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return Promise.reject();\r\n        }\r\n    }\r\n\r\n    private isRunning(): boolean {\r\n        return typeof this.fileSystemWatcher !== 'undefined';\r\n    }\r\n}","import * as path from 'path';\r\n\r\nimport { StatementDetails } from './models/statement-details';\r\nimport { IUtility } from './abstractions/utlity.interface';\r\nimport { IConfiguration } from './abstractions/configuration.interface';\r\nimport { IExportStatementBuilder } from './abstractions/export-statement-builder.interface';\r\n\r\nexport class ExportStatementBuilder implements IExportStatementBuilder {\r\n    constructor(private utility: IUtility,\r\n        private configuration: IConfiguration) { }\r\n\r\n    public async build(rootFolderPath:string, filePath: string): Promise<StatementDetails> {\r\n        const config = this.configuration.current;\r\n        const result: StatementDetails = {\r\n            statement: undefined,\r\n            alias: undefined,\r\n            isBarrelImport: false\r\n        };\r\n\r\n        const fileExtension = path.extname(filePath);\r\n        let baseName = path.basename(filePath, fileExtension);\r\n        let importRelativePath = path.relative(rootFolderPath, filePath).replace(/\\\\/g, '/').replace(fileExtension, '');\r\n        if(baseName.toLowerCase() === 'index') {\r\n            importRelativePath = importRelativePath.replace('/index', '');\r\n            baseName = importRelativePath.substr(baseName.lastIndexOf('/') + 1);\r\n            result.isBarrelImport = true;\r\n        }\r\n        if (config.useImportAliasExportPattern) {\r\n            result.alias = this.utility.buildAlias(filePath);\r\n            result.statement = `import * as ${result.alias} from './${importRelativePath}';`;\r\n        } else {\r\n            const containsDefaultExport = await this.utility.containsDefaultExport(filePath);\r\n            if (containsDefaultExport === true) {\r\n                result.statement = `export { default as ${baseName} } from './${importRelativePath}';`;\r\n            } else {\r\n                result.statement = `export * from './${importRelativePath}';`;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}"],"sourceRoot":""}